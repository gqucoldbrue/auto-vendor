"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClerkContextProvider = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const isomorphicClerk_1 = tslib_1.__importDefault(require("../isomorphicClerk"));
const AuthContext_1 = require("./AuthContext");
const ClientContext_1 = require("./ClientContext");
const IsomorphicClerkContext_1 = require("./IsomorphicClerkContext");
const OrganizationContext_1 = require("./OrganizationContext");
const SessionContext_1 = require("./SessionContext");
const UserContext_1 = require("./UserContext");
function ClerkContextProvider(props) {
    const { isomorphicClerkOptions, initialState, children } = props;
    const { isomorphicClerk: clerk, loaded: clerkLoaded } = useLoadedIsomorphicClerk(isomorphicClerkOptions);
    const [state, setState] = react_1.default.useState({
        client: clerk.client,
        session: clerk.session,
        user: clerk.user,
        organization: clerk.organization,
        lastOrganizationInvitation: null,
        lastOrganizationMember: null,
    });
    const derivedState = deriveState(clerkLoaded, state, initialState);
    react_1.default.useEffect(() => {
        return clerk.addListener(e => setState(Object.assign({}, e)));
    }, []);
    const clerkCtx = react_1.default.useMemo(() => ({ value: clerk }), [clerkLoaded]);
    const clientCtx = react_1.default.useMemo(() => ({ value: state.client }), [state.client]);
    const authCtx = react_1.default.useMemo(() => {
        return {
            value: { sessionId: derivedState.sessionId, userId: derivedState.userId },
        };
    }, [derivedState.sessionId, derivedState.userId]);
    const userCtx = react_1.default.useMemo(() => {
        return { value: derivedState.user };
    }, [derivedState.userId, derivedState.user]);
    const sessionCtx = react_1.default.useMemo(() => {
        return { value: derivedState.session };
    }, [derivedState.sessionId, derivedState.session]);
    const organizationCtx = react_1.default.useMemo(() => {
        return {
            value: {
                organization: derivedState.organization,
                lastOrganizationInvitation: derivedState.lastOrganizationInvitation,
                lastOrganizationMember: derivedState.lastOrganizationMember,
            },
        };
    }, [derivedState.organization, derivedState.lastOrganizationInvitation, derivedState.lastOrganizationMember]);
    return (react_1.default.createElement(IsomorphicClerkContext_1.IsomorphicClerkContext.Provider, { value: clerkCtx },
        react_1.default.createElement(ClientContext_1.ClientContext.Provider, { value: clientCtx },
            react_1.default.createElement(SessionContext_1.SessionContext.Provider, { value: sessionCtx },
                react_1.default.createElement(OrganizationContext_1.OrganizationContext.Provider, { value: organizationCtx },
                    react_1.default.createElement(AuthContext_1.AuthContext.Provider, { value: authCtx },
                        react_1.default.createElement(UserContext_1.UserContext.Provider, { value: userCtx }, children)))))));
}
exports.ClerkContextProvider = ClerkContextProvider;
const useLoadedIsomorphicClerk = (options) => {
    const [loaded, setLoaded] = react_1.default.useState(false);
    const isomorphicClerk = react_1.default.useMemo(() => isomorphicClerk_1.default.getOrCreateInstance(options), []);
    react_1.default.useEffect(() => {
        isomorphicClerk.addOnLoaded(() => setLoaded(true));
    }, []);
    return { isomorphicClerk, loaded };
};
// This should be provided from isomorphicClerk
// TODO: move inside isomorphicClerk
function deriveState(clerkLoaded, state, initialState) {
    if (!clerkLoaded && initialState) {
        const userId = initialState.userId;
        // TODO: Instantiate an actual user resource
        const user = initialState.user;
        const sessionId = initialState.sessionId;
        // TODO: Instantiate an actual session resource
        const session = initialState.session;
        // TODO: Fix post-SSR decision
        const organization = undefined;
        return {
            sessionId,
            session,
            userId,
            user,
            organization,
            lastOrganizationInvitation: null,
            lastOrganizationMember: null,
        };
    }
    const userId = state.user ? state.user.id : state.user;
    const user = state.user;
    const sessionId = state.session ? state.session.id : state.session;
    const session = state.session;
    const organization = state.organization;
    const lastOrganizationInvitation = state.lastOrganizationInvitation;
    const lastOrganizationMember = state.lastOrganizationMember;
    return { sessionId, session, userId, user, organization, lastOrganizationInvitation, lastOrganizationMember };
}
//# sourceMappingURL=ClerkContextProvider.js.map